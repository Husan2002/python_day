lst = [11, 5, 8, 32, 15, 3, 20, 132, 21, 4, 555, 9, 20]
llst = []
# def lst_to_dict():
#     for i in lst:
#         if i %3==0 and i < 30:
#             print(i)
#             llst.append(i)
#     print(sum(llst))

# # lst_to_dict()

# #2
# Напишите функцию to_dict(lst), которая принимает аргумент в виде списка и возвращает словарь, в котором каждый элемент списка является и ключом и значением. Предполагается, что элементы списка будут соответствовать правилам задания ключей в словарях.

def to_dict(lst):
    dic = {}
    for i in lst:
        dic[i] = i
    return dic

# print(to_dict(1,2,3,4,5,6,7,8,9))



# #3
# Иван решил создать самый большой словарь в мире. Для этого он придумал функцию biggest_dict(**kwargs), которая принимает неограниченное количество параметров «ключ: значение» и обновляет созданный им словарь my_dict, состоящий всего из одного элемента «first_one» со значением «we can do it». Воссоздайте эту функцию.

def bigeest_dict(**kwargs):
    my_dict = {'first_one': 'we can do it'}
    for k,w in kwargs.items():
        my_dict[k] = w
    return my_dict

# bigeest_dict(artur = 'Artur', symik = 'Siymik')


# #4
# Дана строка в виде случайной последовательности чисел от 0 до 9. 

# Требуется создать словарь, который в качестве ключей будет принимать данные числа (т. е. ключи будут типом int), а в качестве значений – количество этих чисел в имеющейся последовательности. Для построения словаря создайте функцию count_it(sequence), принимающую строку из цифр. Функция должна возвратить словарь из 3-х самых часто встречаемых чисел.

# def count_it(sequence: str ):
#     for i in sequence:



# #5
# Напишите функцию tpl_sort(), которая сортирует кортеж, состоящий из целых чисел по возрастанию и возвращает его. Если хотя бы один элемент не является целым числом, то функция возвращает исходный кортеж.

# tup = (3.65,1,3,4,6,43.6,4,8,2,12.5,22.3,1,9,6,4,3,22.6,2,7,6,5,0)
# lst2 = []
# isxodnik = []
# def tpl_sort(seter):
#     for i in seter:
#         if type(i) != float:
#             lst2.append(i)
#         elif type(i) == float:
#             isxodnik.append(i)
#     print(sorted(lst2))
#     print(isxodnik)

# tpl_sort(tup)




# #6
# Функция slicer() на вход принимает кортеж и случайный элемент. Требуется вернуть новый кортеж, начинающийся с первого появления элемента в нем и заканчивающийся вторым его появлением включительно.
# Если элемента нет вовсе – вернуть пустой кортеж.
# Если элемент встречается только один раз, то вернуть кортеж, который начинается с него и идет до конца исходного.




# #7
# Перед студентом стоит задача: на вход функции sieve() поступает список целых чисел. В результате выполнения этой функции будет получен кортеж уникальных элементов списка в обратном порядке.

# lst3 = [0,1,9,2,8,3,7,4,6,5,5,6,4,7,3,8,2,9,1,0]

# def sieve(kortej):
#     kortej = list(set(kortej))
#     print(kortej[::-1])

# sieve(lst3)


# #8
# Николай знает, что кортежи являются неизменяемыми, но он с этим не готов соглашаться. Ученик решил создать функцию del_from_tuple(), которая будет удалять первое появление определенного элемента из кортежа по значению и возвращать кортеж без оного. Попробуйте повторить шедевр не признающего авторитеты начинающего программиста. К слову, Николай не всегда уверен в наличии элемента в кортеже (в этом случае кортеж вернется функцией в исходном виде).

tupp = (12,43,'5456','husan',[23,56],True)
lst_tup = []

def del_from_tuple(tuppel):
    for i in tuppel:
        lst_tup.append(i)
    a = int(input('number: '))-1
    lst_tup.pop(a)

    print(tuple(lst_tup))

del_from_tuple(tupp)

# #9
# На входе функция to_set() получает строку или список чисел. Преобразуйте их в множество. На выходе должно получиться множество и его мощность.



# #10
# Функция to_list() принимает неограниченное количество параметров. 
# Обработайте их так, чтобы на выходе получить список из этих элементов.

et_lst = []
def to_list_values():
    global et_lst
    while 1:
        print('for finish program enter (done)')
        enter = input('enter value: ')
        if enter == 'done':
            break
        else:
            et_lst.append(enter)
            print(et_lst)
            continue
    print(et_lst)
# to_list_values()


# #11
# Составьте функцию season_events(number_of_month), которая принимает номер месяца вашего рождения и в зависимости от сезона печатает на выходе следующее:
# «Вы родились в <НАЗВАНИЕ_МЕСЯЦА>. <ОПИСАНИЕ_СОБЫТИЙ>».

# В качестве ОПИСАНИЯ_СОБЫТИЙ будет характеристика сезона: 
# - для зимы «За окном падал белый снег»,
# - для весны «Птицы пели прекрасные песни»,
# - для лета «Солнце светило ярче чем когда-либо»,
# - для осени «Урожай был невероятным».

# Важно учесть, что пользователи могут ввести любой тип данных в качестве аргумента (не попадитесь на этом и предупредите о том, что «Требуется ввести реальный номер месяца»).


def season_events():
    while 1:
        month_number = int(input('enter number of month: '))
        if month_number not in (1,2,3,4,5,6,7,8,9,10,11,12):
            print('please enter month number...!')
            continue
        else:
            if month_number in (12,1,2):
                print('«За окном падал белый снег»')
            elif month_number in (3,4,5):
                print('«Птицы пели прекрасные песни»')
            elif month_number in (6,7,8):
                print('«Солнце светило ярче чем когда-либо»')
            elif month_number in (9,10,11):
                print('«Урожай был невероятным»')

# season_events()




# #12
# Для идентификации своего круга проверенных лиц будущий тайный агент (ведь все о чем-то мечтают) 
# Максим решил пускать на свою страничку в Интернете только тех, чьи никнеймы есть в его секретном списке. 
# Он уверен в своих людях (особенно в том, что они по глупости не расскажут никому своё секретное прозвище), 
# как и в том, что имена товарищей невозможно подобрать случайно.

# К слову, вот этот список: Мавпродош, Лорнектиф, Древерол, Фиригарпиг, Клодобродыч. 
# По мере увеличения круга знакомых Максим, естественно, дополнит данный список.

# Ваша задача такова: повторите код, который будет спрашивать у пользователя его ник и 
# либо пускать на сайт (выведется сообщение «Ты – свой. Приветствую, любезный {НИК_ПОСЕТИТЕЛЯ}!»), 
# либо нет (в этом случае будет такой текст: «Тут ничего нет. Еще есть вопросы?». 
# Фактически, будущий супергерой решил поиздеваться над теми, кого нет в его удивительном перечне, так как им будет показываться это сообщение постоянно. 
# Очень коварный замысел!).

# Для проверки прозвищ посетителей используйте встроенную функцию input().


lst_name = ['Vadim','Yuriy','Killer','Selly','Joker']
def trust_name(name):
    while 1:
        print('')
        print('for finish program enter (exit)')
        secret_name = input('enter name: ').capitalize()
        if secret_name == 'Husan':
            print(f'прошу прощение {secret_name} я не знал что вы наш бос входите')
        elif secret_name == 'Exit':
            print('bye')
            break
        else:
            if secret_name in name:
                print(f'Ты – свой. Приветствую, любезный {secret_name}!')
            elif secret_name not in name:
                print(f'Тут ничего нет. Еще есть вопросы? {secret_name}')

# trust_name(lst_name)
